// Generated by CoffeeScript 1.6.3
var Build, DependenciesReporter, UError, fs, l, uRequireConfigMasterDefaults, upath, wrench, _, _B;

_ = require('lodash');

fs = require('fs');

wrench = require('wrench');

_B = require('uberscore');

l = new _B.Logger('urequire/Build');

upath = require('../paths/upath');

DependenciesReporter = require('./../DependenciesReporter');

uRequireConfigMasterDefaults = require('../config/uRequireConfigMasterDefaults');

UError = require('../utils/UError');

module.exports = Build = (function() {
  var _this = this;

  Function.prototype.property = function(p) {
    var d, n, _results;
    _results = [];
    for (n in p) {
      d = p[n];
      _results.push(Object.defineProperty(this.prototype, n, d));
    }
    return _results;
  };

  Function.prototype.staticProperty = function(p) {
    var d, n, _results;
    _results = [];
    for (n in p) {
      d = p[n];
      _results.push(Object.defineProperty(Build.prototype, n, d));
    }
    return _results;
  };

  function Build() {
    this._constructor.apply(this, arguments);
  }

  Build.prototype._constructor = function(buildCfg) {
    var idp;
    _.extend(this, buildCfg);
    if (!this.out) {
      this.out = Build.outputToFile;
    }
    return this.interestingDepTypes = this.verbose ? DependenciesReporter.prototype.reportedDepTypes : (idp = ['notFoundInBundle', 'untrustedRequireDeps', 'untrustedAsyncDeps'], this.template.name === 'combined' ? idp.push('global') : void 0, idp);
  };

  Build.templates = ['UMD', 'AMD', 'nodejs', 'combined'];

  Build.outputToFile = function(outputFilename, content) {
    var err, uerr;
    if (l.deb(5)) {
      l.debug("Writting file '" + outputFilename + "'");
    }
    try {
      if (!fs.existsSync(upath.dirname(outputFilename))) {
        l.verbose("Creating directory '" + (upath.dirname(outputFilename)) + "'");
        wrench.mkdirSyncRecursive(upath.dirname(outputFilename));
      }
      fs.writeFileSync(outputFilename, content, 'utf-8');
      if (this.watch) {
        return l.verbose("Written file '" + outputFilename + "'");
      }
    } catch (_error) {
      err = _error;
      l.err(uerr = "Can't outputToFile '" + outputFilename + "'");
      throw new UError(uerr, {
        nested: err
      });
    }
  };

  Build.copyFileSync = function(srcFile, destFile) {
    var BUF_LENGTH, buff, bytesRead, err, fdr, fdw, pos, uerr;
    if (l.deb(30)) {
      l.debug("copyFileSync {src='" + srcFile + "', dst='" + destFile + "'");
    }
    try {
      BUF_LENGTH = 64 * 1024;
      buff = new Buffer(BUF_LENGTH);
      fdr = fs.openSync(srcFile, 'r');
      if (!(fs.existsSync(upath.dirname(destFile)))) {
        l.verbose("Creating directory " + (upath.dirname(destFile)));
        wrench.mkdirSyncRecursive(upath.dirname(destFile));
      }
      fdw = fs.openSync(destFile, 'w');
      bytesRead = 1;
      pos = 0;
      while (bytesRead > 0) {
        bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
        fs.writeSync(fdw, buff, 0, bytesRead);
        pos += bytesRead;
      }
      fs.closeSync(fdr);
      return fs.closeSync(fdw);
    } catch (_error) {
      err = _error;
      l.err(uerr = "copyFileSync from '" + srcFile + "' to '" + destFile + "'");
      throw new UError(uerr, {
        nested: err
      });
    }
  };

  return Build;

}).call(this);
