// Generated by CoffeeScript 1.6.2
var uBerscoreShortcuts, _, _B;

_ = require('lodash');

_B = require('uberscore');

uBerscoreShortcuts = (function() {
  function uBerscoreShortcuts() {}

  /*
  
  Convert from Source
     Array<String>
   to
     Object with Source Values as Keys & a new Array as Value
   []<String> -> '{
                   key: (k,v)-> v
                   val: (k,v)-> []
                 }'
  @param arr []<String> or []<Stringable>
  @return {
    string1: []
    string2: []
  }
  @todo:(2 5 6) make generic ?
  */


  uBerscoreShortcuts.prototype.arrayToObjectWithValuesAsKeys = function(arr) {
    var obj;

    obj = {};
    _B.go(arr, {
      grab: function(v) {
        return obj[v + ''] = [];
      }
    });
    return obj;
  };

  /*
    it converts 'imperfect' input like
      'str1' or ['str1', 'str2']
    to
      {str1:[], str2:[]}
  
    or
      {key: 'stringVal'}
    to
      {key: ['stringVal']}
  @todo:(2 5 6) Crap name again, an not generic enough, I know that too :
  todo :
  */


  uBerscoreShortcuts.prototype.toObjectKeysWithArrayValues = function(input) {
    var result;

    result = _.isString(input) ? _B.arrayize(input) : input;
    if (_.isArray(result)) {
      result = this.arrayToObjectWithValuesAsKeys(result);
    } else {
      if (_.isObject(result)) {
        _B.mutate(result, _B.arrayize, _.isString);
      }
    }
    return result;
  };

  /*
  @todo:(2 3 6) Crap name again, an not generic enough, I know that too :
    it converts 'imperfect' input like
      'str1' or ['str1', 'str2']
    to
      {str1:{name:str1} , str2:{name:str2} }
  
    or
      {key1: {}, key1: {}}
    to
      {key1: {name: 'key1'}, {key2: {name: 'key1'}}
  
  @todo:(2 3 7) Generalize this and the above!
  */


  uBerscoreShortcuts.prototype.toObjectKeysWithNameAttributeAsKey = function(input, name) {
    var key, obj, result, val;

    if (name == null) {
      name = 'name';
    }
    result = _.isString(input) ? _B.arrayize(input) : input;
    if (_.isArray(result)) {
      obj = {};
      _B.go(result, {
        grab: function(v) {
          return obj[v + ''] = {};
        }
      });
      result = obj;
    }
    if (_.isObject(result)) {
      for (key in result) {
        val = result[key];
        result[key][name] = key;
      }
    }
    return result;
  };

  return uBerscoreShortcuts;

})();

module.exports = new uBerscoreShortcuts;
