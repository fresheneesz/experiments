// Generated by CoffeeScript 1.6.3
var Dependency, l, pathRelative, upath, _, _B,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

_.mixin((require('underscore.string')).exports());

_B = require('uberscore');

l = new _B.Logger('urequire/Dependency');

upath = require('./paths/upath');

pathRelative = require('./paths/pathRelative');

Dependency = (function() {
  var _this = this;

  Function.prototype.property = function(p) {
    var d, n, _results;
    _results = [];
    for (n in p) {
      d = p[n];
      _results.push(Object.defineProperty(this.prototype, n, d));
    }
    return _results;
  };

  Function.prototype.staticProperty = function(p) {
    var d, n, _results;
    _results = [];
    for (n in p) {
      d = p[n];
      _results.push(Object.defineProperty(Dependency.prototype, n, d));
    }
    return _results;
  };

  /*
    @param {String} depString The original dependency, as passed i.e 'uberscore' or '../mylibs/dep'
  
    @param {String} moduleString The module (bundle relative) that has this dependency (optional).
                    Used to calculate relative paths.
  
    @param {Bundle or {} with dstFilenames: Array<String>}
        The dstFilenames (bundleRelative) in the bundle are used to
        calculate whether './../myDep' isFound, which in turn is used by isGlobal etc.
  */


  function Dependency(depString, moduleString, bundle) {
    var indexOfSep;
    this.depString = depString;
    this.moduleString = moduleString != null ? moduleString : '';
    this.bundle = bundle;
    depString = depString.replace(/\\/g, '/');
    indexOfSep = depString.indexOf('!');
    if (indexOfSep > 0) {
      this.pluginName = depString.slice(0, +(indexOfSep - 1) + 1 || 9e9);
    }
    this.resourceName = indexOfSep >= 0 ? depString.slice(indexOfSep + 1, +(this.depString.length - 1) + 1 || 9e9) : depString;
    if (upath.extname(this.resourceName)) {
      this.extname = upath.extname(this.resourceName);
      this.resourceName = upath.trimExt(this.resourceName);
    }
  }

  Dependency.TYPES = {
    notFoundInBundle: 'notFoundInBundle',
    global: 'global',
    external: 'external',
    webRootMap: 'webRootMap',
    bundle: 'bundle'
  };

  Dependency.property({
    type: {
      get: function() {
        if (this.isGlobal) {
          return Dependency.TYPES.global;
        } else {
          if (this.isExternal) {
            return Dependency.TYPES.external;
          } else {
            if (this.isNotFoundInBundle) {
              return Dependency.TYPES.notFoundInBundle;
            } else {
              if (this.isWebRootMap) {
                return Dependency.TYPES.webRootMap;
              } else {
                return Dependency.TYPES.bundle;
              }
            }
          }
        }
      }
    }
  });

  Dependency.prototype.name = function(options) {
    if (options == null) {
      options = {};
    }
    if (options.ext == null) {
      options.ext = this.isExternal || this.isNotFoundInBundle ? true : false;
    }
    if (options.plugin == null) {
      options.plugin = true;
    }
    if (options.relativeType == null) {
      options.relativeType = 'file';
    }
    return "" + (options.plugin && this.pluginName ? this.pluginName + '!' : '') + (options.relativeType === 'bundle' ? this._bundleRelative : this._fileRelative) + (options.ext === false || !this.extname ? '' : this.extname);
  };

  Dependency.prototype.toString = function() {
    return this.name();
  };

  /*
  Compare this Dependency instance with another, either Dependency or a string representation of another type.
  It caters for different representations of
    * bundleRelative / fileRelative
    * having `.js` extension or not
  
  @param dep {Dependency | String | .toString} The depedency to compare with this - returns true if
  */


  Dependency.prototype.isEqual = function(dep) {
    var isSameJSFile;
    isSameJSFile = function(a, b) {
      return upath.defaultExt(a, '.js') === upath.defaultExt(b, '.js');
    };
    if (_.isFunction(dep.isBundleBoundary && _.isFunction(dep.name))) {
      return isSameJSFile(dep.name(), this.name());
    } else {
      if (!_.isString(dep)) {
        dep = dep.toString();
      }
    }
    return isSameJSFile(dep, this.name()) || isSameJSFile(dep, this.name({
      relativeType: 'bundle'
    }));
  };

  Dependency.property({
    _bundleRelative: {
      get: function() {
        if (this.isFileRelative && this.isBundleBoundary) {
          return upath.normalize("" + (upath.dirname(this.moduleString)) + "/" + this.resourceName);
        } else {
          return this.resourceName;
        }
      }
    },
    _fileRelative: {
      get: function() {
        if (this.moduleString && this.isFound) {
          return pathRelative("$/" + (upath.dirname(this.moduleString)), "$/" + this._bundleRelative, {
            dot4Current: true
          });
        } else {
          return this.resourceName;
        }
      }
    },
    isBundleBoundary: {
      get: function() {
        if (this.isWebRootMap || (!this.moduleString)) {
          return false;
        } else {
          return !!pathRelative("$/" + this.moduleString + "/../../" + this.resourceName, "$");
        }
      }
    },
    isFileRelative: {
      get: function() {
        return this.resourceName[0] === '.';
      }
    },
    isRelative: {
      get: function() {
        return this.resourceName.indexOf('/') >= 0 && !this.isWebRootMap;
      }
    },
    isWebRootMap: {
      get: function() {
        return this.resourceName[0] === '/';
      }
    },
    isGlobal: {
      get: function() {
        return !this.isWebRootMap && !this.isRelative && !this.isFound;
      }
    },
    /* external-looking deps, like '../../../some/external/lib'*/

    isExternal: {
      get: function() {
        return !(this.isBundleBoundary || this.isWebRootMap);
      }
    },
    isNotFoundInBundle: {
      get: function() {
        return this.isBundleBoundary && !(this.isFound || this.isGlobal);
      }
    },
    isFound: {
      get: function() {
        var _ref, _ref1;
        if ((_ref = this.bundle) != null ? _ref.dstFilenames : void 0) {
          return _ref1 = upath.defaultExt(this._bundleRelative, '.js'), __indexOf.call(this.bundle.dstFilenames, _ref1) >= 0;
        }
      }
    }
  });

  return Dependency;

}).call(this);

module.exports = Dependency;
