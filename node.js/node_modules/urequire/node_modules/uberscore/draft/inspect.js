// Generated by uRequire v0.4.0beta2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('draft/inspect', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../agreement/isAgree'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var inspect;

inspect = function(x) {
    var complex, format, formatString, i, isFunction, len, newValues, repeats, spaces, stringify, uses, values, varName, wrote;
    complex = function(x) {
        return x && ("object" === typeof x || "function" === typeof x);
    };
    repeats = function(x) {
        var i, index, _results;
        _results = [];
        for (i in x) {
            if (complex(x[i])) {
                index = values.indexOf(x[i]);
            }
            if (index === -1) {
                values.push(x[i]);
                _results.push(repeats(x[i]));
            } else {
                _results.push(uses[index] = true);
            }
        }
        return _results;
    };
    varName = function(x, assign) {
        var index;
        index = newValues.indexOf(x);
        if (index !== -1) {
            return "REF" + index + (assign ? " = " : "");
        } else {
            return "";
        }
    };
    isFunction = function(f) {
        var name;
        if ("function" !== typeof f) {
            return "";
        }
        name = /function (\w*\(\w*\))/.exec("" + f);
        return "function" + (name ? " " + name[1] : "");
    };
    len = function(x) {
        var l;
        l = 0;
        x.forEach(function(e) {
            return l = l + (e ? e.length : 0) + 2;
        });
        return l;
    };
    spaces = function(indent) {
        var s;
        s = "";
        while (s.length < indent) {
            s += " ";
        }
        return s;
    };
    format = function(pre, func, ary, indent, array) {
        var close, f, l, open;
        open = void 0;
        close = void 0;
        if (array || "function" === typeof func) {
            open = "[";
            close = "]";
        } else {
            open = "{";
            close = "}";
        }
        f = isFunction(func);
        l = pre.length + f.length + len(ary) + indent;
        if (ary.length === 0 && f !== "") {
            return pre + open + f + close;
        }
        if (l > 80) {
            if (f !== "") {
                f = f + "\n";
            }
            if (pre !== "") {
                pre = pre + "\n  ";
            }
            open = open + " ";
            close = " " + close;
            return pre + open + f + ary.join("\n" + spaces(indent) + ", ") + close;
        } else {
            if (f !== "") {
                f = f + " ";
            }
            return pre + open + f + ary.join(", ") + close;
        }
    };
    formatString = function(x, spaces) {
        var last, list, s;
        if (x.indexOf("\n") === -1) {
            return JSON.stringify(x);
        }
        list = x.split("\n");
        last = list.pop();
        list = list.map(function(i) {
            return i + "\n";
        });
        list.push(last);
        s = "" + JSON.stringify(list.shift());
        list.forEach(function(e) {
            return s += "\n+ " + JSON.stringify(e);
        });
        return s;
    };
    stringify = function(x, spaces) {
        var ary, i, obj, pre;
        if (wrote.indexOf(x) === -1) {
            if (x instanceof Array) {
                wrote.push(x);
                ary = x.map(function(v, k) {
                    return stringify(v, spaces + 2);
                });
                pre = varName(x, true);
                return format(pre, null, ary, spaces, true);
            } else if (complex(x)) {
                wrote.push(x);
                obj = [];
                pre = varName(x, true);
                for (i in x) {
                    obj.push(i + ": " + stringify(x[i], spaces + 2));
                }
                return format(pre, x, obj, spaces, false);
            } else if ("string" === typeof x) {
                return formatString(x, spaces);
            } else {
                return JSON.stringify(x);
            }
        } else {
            return varName(x);
        }
    };
    values = [];
    uses = {};
    if (complex(x)) {
        repeats(x);
    }
    newValues = [];
    for (i in values) {
        if (uses[i]) {
            newValues.push(values[i]);
        }
    }
    wrote = [];
    return stringify(x, 0);
};

module.exports = inspect;
// uRequire: end body of original nodejs module


return module.exports;
})
})();