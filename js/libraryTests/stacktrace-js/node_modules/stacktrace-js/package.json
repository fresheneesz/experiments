{
  "name": "stacktrace-js",
  "description": "Framework-agnostic, micro-library for getting stack traces in all environments",
  "author": {
    "name": "Eric Wendelin",
    "email": "me@eriwen.com",
    "url": "http://eriwen.com"
  },
  "version": "0.6.0",
  "keywords": [
    "stack-trace",
    "cross-browser",
    "framework-agnostic",
    "client",
    "browser"
  ],
  "homepage": "http://stacktracejs.com",
  "repository": {
    "type": "git",
    "url": "git://github.com/eriwen/javascript-stacktrace.git"
  },
  "main": "./stacktrace.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "jshint": "0.9.x"
  },
  "readme": "# What is stacktrace.js? #\nA Javascript tool that allows you to debug your JavaScript by giving you a [stack trace](http://en.wikipedia.org/wiki/Stack_trace) of function calls leading to an error (or any condition you specify)\n\n# How do I use stacktrace.js? #\nJust include stacktrace.js file on your page, and call it like so:\n\n```html\n<script type=\"text/javascript\" src=\"path/to/stacktrace.js\" />\n<script type=\"text/javascript\">\n    ... your code ...\n    if (errorCondition) {\n         var trace = printStackTrace();\n         //Output however you want!\n         alert(trace.join('\\n\\n'));\n    }\n    ... more code of yours ...\n</script>\n```\n\nBookmarklet available on the [project home page](http://stacktracejs.com).\n\nYou can also pass in your own Error to get a stacktrace *not available in IE or Safari 5-*\n\n```javascript\nvar lastError;\ntry {\n    // error producing code\n} catch(e) {\n   lastError = e;\n   // do something else with error\n}\n\n// Returns stacktrace from lastError!\nprintStackTrace({e: lastError});\n```\n\n# Function Instrumentation #\nYou can now have any (public or privileged) function give you a stacktrace when it is called:\n\n```javascript\nvar p = new printStackTrace.implementation();\np.instrumentFunction(this, 'baz', logStackTrace);\nfunction logStackTrace(stack) {\n    console.log(stack.join('\\n'));\n}\nfunction foo() {\n    var a = 1;\n    bar();\n}\nfunction bar() {\n    baz();\n}\nfoo(); //Will log a stacktrace when 'baz()' is called containing 'foo()'!\n\np.deinstrumentFunction(this, 'baz'); //Remove function instrumentation\n```\n\n# What browsers does stacktrace.js support? #\nIt is currently tested and working on:\n\n - Firefox (and Iceweasel) 0.9+\n - Google Chrome 1+\n - Safari 3.0+ (including iOS 1+)\n - Opera 7+\n - IE 5.5+\n - Konqueror 3.5+\n - Flock 1.0+\n - SeaMonkey 1.0+\n - K-Meleon 1.5.3+\n - Epiphany 2.28.0+\n - Iceape 1.1+\n\n## Contributions [![Stories in Ready](http://badge.waffle.io/eriwen/javascript-stacktrace.png)](http://waffle.io/eriwen/javascript-stacktrace)  \n\nThis project is made possible due to the efforts of these fine people:\n\n* [Eric Wendelin](http://eriwen.com)\n* [Luke Smith](http://lucassmith.name/)\n* Loic Dachary\n* Johan Euphrosine\n* Ã˜yvind Sean Kinsey\n* Victor Homyakov\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/eriwen/javascript-stacktrace/issues"
  },
  "_id": "stacktrace-js@0.6.0",
  "dist": {
    "shasum": "7c3966adc6aafbb253e59e11e481a528bbfd58e5"
  },
  "_from": "https://github.com/stacktracejs/stacktrace.js/archive/b289dabc8a438ae24c26e0de0b2cb80de69b7988.tar.gz",
  "_resolved": "https://github.com/stacktracejs/stacktrace.js/archive/b289dabc8a438ae24c26e0de0b2cb80de69b7988.tar.gz"
}
