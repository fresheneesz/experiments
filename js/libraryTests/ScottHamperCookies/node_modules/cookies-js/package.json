{
  "name": "cookies-js",
  "version": "0.3.1",
  "author": {
    "name": "Scott Hamper"
  },
  "description": "Client-Side Cookie Manipulation API",
  "homepage": "http://github.com/ScottHamper/Cookies",
  "license": "MIT",
  "keywords": [
    "cookies",
    "client",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ScottHamper/Cookies.git"
  },
  "main": "./src/cookies.js",
  "readme": "# Cookies.js\r\n\r\nCookies.js is a small client-side javascript library that makes managing cookies easy.\r\n\r\n## Features\r\n- Caches cookie values, making sequential reads faster.\r\n- Supports AMD / CommonJS loaders.\r\n- Cross browser.\r\n- Lightweight (less than 1 KB, minified and gzipped).\r\n- [RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt) Compliant.\r\n\r\n## Browser Compatibility\r\nThe following browsers have passed all of the Cookies.js unit tests:\r\n- Chrome\r\n- Firefox 3+\r\n- Safari 4+\r\n- Opera 10+\r\n- Internet Explorer 6+\r\n\r\n## A Note About Encoding\r\nCookies.js URI encodes cookie keys and values, and expects cookie keys to be URI encoded when accessing a cookie.\r\nKeep this in mind when working with cookies on the server side.\r\n\r\n### .NET Users\r\nDo not use [HttpUtility.UrlEncode](http://msdn.microsoft.com/en-us/library/4fkewx0t.aspx) and\r\n[HttpUtility.UrlDecode](http://msdn.microsoft.com/en-us/library/adwtk1fy.aspx) on cookie keys or values. `HttpUtility.UrlEncode` will\r\nimproperly escape space characters to `'+'` and lower case every escape sequence. `HttpUtility.UrlDecode` will improperly unescape\r\nevery `'+'` to a space character. Instead, use\r\n[System.Uri.EscapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.escapedatastring.aspx) and\r\n[System.Uri.UnescapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.unescapedatastring.aspx).\r\n\r\n\r\n# API Reference\r\n\r\n## Methods\r\n\r\n### Cookies.set(key, value [, options])\r\n*Alias: Cookies(key, value [, options])*\r\n\r\nSets a cookie in the document. If the cookie does not already exist, it will be created.\r\n\r\n#### Arguments:\r\n*key*: A string value of the cookie key to set  \r\n*value*: A string value of the cookie value to set  \r\n*options*: An object containing additional parameters about the cookie (discussed below)\r\n\r\n#### Returns:\r\nThe `Cookies` object is returned to support chaining.\r\n\r\n#### The 'options' Object:\r\n*path*: A string value of the path of the cookie  \r\n*domain*: A string value of the domain of the cookie  \r\n*expires*: A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire  \r\n*secure*: A boolean value of whether or not the cookie should only be available over SSL\r\n\r\nIf any property is left undefined, the browser's default value will be used instead. A default value\r\nfor any property may be set in the `Cookies.defaults` object.\r\n\r\n**Why use 'expires' instead of 'max-age' (or why not both)?**  \r\nInternet Explorer 6 - 8 do not support 'max-age', so Cookies.js always uses 'expires' internally.\r\nHowever, Cookies.js simplifies things by allowing the `options.expires` property to be used in the\r\nsame way as 'max-age' (by setting `options.expires` to the number of seconds the cookie should exist for).\r\n\r\n#### Example usage:\r\n    // Setting a cookie value\r\n    Cookies.set('key', 'value');\r\n    \r\n    // Chaining sets together\r\n    Cookies.set('key', 'value').set('hello', 'world');\r\n    \r\n    // Setting cookies with additional options\r\n    Cookies.set('key', 'value', { domain: 'www.example.com', secure: true });\r\n    \r\n    // Setting cookies with expiration values\r\n    Cookies.set('key', 'value', { expires: 600 }); // Expires in 10 minutes\r\n    Cookies.set('key', 'value', { expires: '01/01/2012' });\r\n    Cookies.set('key', 'value', { expires: new Date(2012, 0, 1) });\r\n    \r\n    // Using the alias\r\n    Cookies('key', 'value', { secure: true });\r\n\r\n### Cookies.get(key)\r\n*Alias: Cookies(key)*\r\n\r\nRetrieves the cookie value of the most locally scoped cookie with the specified key.\r\n\r\n#### Arguments:\r\n*key*: A string value of a cookie key\r\n\r\n#### Returns:\r\nThe string value of the cookie.\r\n\r\n#### Example Usage:\r\n    // First set a cookie\r\n    Cookies.set('key', 'value');\r\n    \r\n    // Get the cookie value\r\n    Cookies.get('key'); // \"value\"\r\n    \r\n    // Using the alias\r\n    Cookies('key'); // \"value\"\r\n    \r\n### Cookies.expire(key [, options])\r\n*Alias: Cookies(key, `undefined` [, options])*\r\n\r\nExpires a cookie, removing it from the document.\r\n\r\n#### Arguments:\r\n*key*: A string value of the cookie key to expire  \r\n*options*: An object containing additional parameters about the cookie (discussed below)\r\n\r\n#### Returns:\r\nThe `Cookies` object is returned to support chaining.\r\n\r\n#### The 'options' Object:\r\n*path*: A string value of the path of the cookie  \r\n*domain*: A string value of the domain of the cookie\r\n\r\nIf any property is left `undefined`, the browser's default value will be used instead. A default value\r\nfor any property may be set in the `Cookies.defaults` object.\r\n\r\n#### Example Usage:\r\n    // First set a cookie and get its value\r\n    Cookies.set('key', 'value').get('key'); // \"value\"\r\n    \r\n    // Expire the cookie and try to get its value\r\n    Cookies.expire('key').get('key'); // undefined\r\n    \r\n    // Using the alias instead\r\n    Cookies('key', undefined);\r\n    \r\n\r\n## Properties\r\n\r\n### Cookies.enabled\r\nA boolean value of whether or not the browser has cookies enabled.\r\n\r\n#### Example Usage:\r\n    if (Cookies.enabled) {\r\n        Cookies.set('key', 'value');\r\n    }\r\n\r\n### Cookies.defaults\r\nAn object representing default options to be used when setting and expiring cookie values.\r\n`Cookies.defaults` supports the following properties:\r\n\r\n*path*: A string value of the path of the cookie  \r\n*domain*: A string value of the domain of the cookie  \r\n*expires*: A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire  \r\n*secure*: A boolean value of whether or not the cookie should only be available over SSL\r\n\r\nBy default, only `Cookies.defaults.path` is set to `'/'`, all other properties are `undefined`.\r\nIf any property is left undefined, the browser's default value will be used instead.\r\n\r\n#### Example Usage:\r\n    Cookies.defaults = {\r\n        path: '/',\r\n        secure: true\r\n    };\r\n    \r\n    Cookies.set('key', 'value'); // Will be secure and have a path of '/'\r\n    Cookies.expire('key'); // Will expire the cookie with a path of '/'\r\n    \r\n    \r\n# Change Log\r\n\r\n## 0.3.1\r\n- Fixed a runtime error that prevented the library from loading when cookies were disabled in the client browser.\r\n- Fixed a bug in IE that would cause the library to improperly read cookies with a value of `\"\"`.\r\n\r\n## 0.3.0\r\n- Rewrote the library from the ground up, using test driven development. The public API remains unchanged.\r\n- Restructured project directories.\r\n\r\n## 0.2.1\r\n- Properly escaped a `[` literal in the RFC6265 regular expression.\r\n\r\n## 0.2.0\r\n- Cookie values are no longer automatically JSON encoded/decoded. This featured was deemed out of the scope of the library.\r\nThis change also removes the dependency on a JSON shim for older browsers.\r\n\r\n## 0.1.7\r\n- Changed cookie value encoding to only encode the special characters defined in [RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt)\r\n\r\n## 0.1.6\r\n- Added `'use strict';` directive.\r\n- Removed some extraneous code.\r\n\r\n## 0.1.5\r\n- Added CommonJS module support.\r\n- Setting an `undefined` value with `Cookies.set` now expires the cookie, mirroring the `Cookies.expire` alias syntax.\r\n- Simplified how the `document.cookie` string is parsed.\r\n\r\n## 0.1.4\r\n- Fixed a bug where setting a cookie's `secure` value to`false` caused the `Cookies.defaults.secure` value to be used instead.\r\n\r\n## 0.1.3\r\n- Added aliases for `Cookies.set` and `Cookies.expire`.\r\n\r\n## 0.1.2\r\n- Set `Cookies.defaults.path` to `'/'`.\r\n- Replaced `escape` and `unescape` function calls with `encodeURIComponent` and `decodeURIComponent`, because the former are deprecated.\r\n- Cookie keys are now URI encoded in addition to cookie values.\r\n\r\n## 0.1.1\r\n- Cross browser fixes.\r\n\r\n## 0.1.0\r\n- Initial commit.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ScottHamper/Cookies/issues"
  },
  "_id": "cookies-js@0.3.1",
  "dist": {
    "shasum": "8e6e1ee30d36b21ee4156a64ea51c4c63dadaa5d"
  },
  "_from": "cookies-js@",
  "_resolved": "https://registry.npmjs.org/cookies-js/-/cookies-js-0.3.1.tgz"
}
